/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5-20220105231256+0000/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'idea'
}


sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'
}

def outputJar = "${buildDir}/libs/${rootProject.name}.jar"
def dependsDir = "${buildDir}/libs/dependencies/"
def runnableJar = "${rootProject.name}_fat.jar";
// Include dependent libraries in archive.
def appClassName = "net.korvin.App"

/*jar {
  manifest {
    attributes(
      'Main-Class': "${appClassName}",
    )
  }
}*/

task fatJar(type: Jar) {
 archiveClassifier = "fatjar"
 //clean
 println("Creating fat jar")
 archiveFileName = "asdfasd.jar"
 manifest {
    attributes ('Main-Class': "zzz${appClassName}")
 }
 from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
 } with jar
 println("Fat jar is created")
}
build.dependsOn fatJar

//Copy dependent libraries to directory.
task copyDependencies(type: Copy) {
 from configurations.default
 into "${dependsDir}"
}

/*
//Create runnable jar with dependencies
task createJar(dependsOn: copyDependencies, type: Jar) {
   println("xx Cleaning...")
    clean
    manifest {
        attributes('Main-Class': "uu${appClassName}",
                'Class-Path': configurations.runtimeClasspath.collect { 'dependencies/' + it.getName() }.join(' ')
        )
    }
    from {
       configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
  println "xx ${outputJar} created"
}
*/

/*application {
    // Define the main class for the application.
    mainClass = "${appClassName}"
} */


