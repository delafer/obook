/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'idea'
}

group 'net.korvin'
version '1.0.0'
def appClassName = "net.korvin.App"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
compileJava.options.encoding = 'UTF-8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://oss.sonatype.org/content/repositories/releases' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
}

// This dependency is used by the application.
dependencies {
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    // Use JUnit test framework.
    //testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    //Lombok
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
}

def outputJar = "${buildDir}/libs/${rootProject.name}.jar"
def dependsDir = "${buildDir}/libs/dependencies/" // Include dependent libraries in archive.

compileJava {
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:deprecation'
}

java {
    withSourcesJar()
    withJavadocJar()
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

application {
    // Define the main class for the application.
    mainClass = "${appClassName}"
}

jar {
 manifest {
        attributes 'Main-Class': "${appClassName}",
                   'Implementation-Version': project.version,
                   'Implementation-Title': 'Gradle Jar File Example'
 }
}

task fatJar(type: Jar) {
 println("# Creating fat jar")
 duplicatesStrategy = DuplicatesStrategy.EXCLUDE
 archiveClassifier = "all" //archiveBaseName.set(project.name + '-all')
 manifest = jar.manifest
 dependsOn configurations.runtimeClasspath
 from {
    configurations.runtimeClasspath.filter{ it.exists() }.findAll { it.name.endsWith('jar') }.collect { it.isDirectory() ? it : zipTree(it) }
 } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
 } with jar
 println("# Fat jar created")
}

//build.dependsOn fatJar
/* tasks {
    "build" {
        dependsOn(fatJar)
    }
} */

//Copy dependent libraries to directory.
task copyDependencies(type: Copy) {
 from configurations.runtimeClasspath
 into "${dependsDir}"
}

//Create runnable jar with dependencies
task createJar(dependsOn: copyDependencies, type: Jar) {
    println("# Creating runnable jar")
    manifest {
        attributes('Main-Class': "${appClassName}",
                'Class-Path': configurations.runtimeClasspath.collect { 'dependencies/' + it.getName() }.join(' ')
        )
    }
   // from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
   with jar
   println("# Runnable jar created")
}

test {
	useJUnitPlatform()
}
